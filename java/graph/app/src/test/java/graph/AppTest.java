/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void addVertexAndGetVertices() {
        Graph<Integer> graph = new Graph<>(5);
        Vertex<Integer> vertex1 = graph.addVertex(1);
        Vertex<Integer> vertex2 = graph.addVertex(2);
        Vertex<Integer> vertex3 = graph.addVertex(3);

        List<Vertex<Integer>> vertices = graph.getVertices();

        assertEquals(3, graph.size());
        assertTrue(vertices.contains(vertex1));
        assertTrue(vertices.contains(vertex2));
        assertTrue(vertices.contains(vertex3));
    }


    @Test
    void addEdgeInvalidVertices() {
        Graph<Character> graph = new Graph<>(5);
        Vertex<Character> vertexA = graph.addVertex('A');
        Vertex<Character> vertexB = new Vertex<>('B'); // Not added to the graph

        assertThrows(IllegalArgumentException.class, () -> graph.addEdge(vertexA, vertexB, 3));
    }

    @Test
    void size() {
        Graph<Double> graph = new Graph<>(5);
        graph.addVertex(1.0);
        graph.addVertex(2.0);
        graph.addVertex(3.0);

        assertEquals(3, graph.size());
    }
    @Test
    void getVertices() {
        Graph<Integer> graph = new Graph<>(5);
        Vertex<Integer> vertex1 = graph.addVertex(1);
        Vertex<Integer> vertex2 = graph.addVertex(2);
        Vertex<Integer> vertex3 = graph.addVertex(3);

        List<Vertex<Integer>> vertices = graph.getVertices();

        assertEquals(3, vertices.size());
        assertTrue(vertices.contains(vertex1));
        assertTrue(vertices.contains(vertex2));
        assertTrue(vertices.contains(vertex3));
    }

    @Test
    void testBreadthFirst() {
        Graph<Integer> graph = new Graph<>(10);

        Vertex<Integer> vertex1 = graph.addVertex(1);
        Vertex<Integer> vertex2 = graph.addVertex(2);
        Vertex<Integer> vertex3 = graph.addVertex(3);
        Vertex<Integer> vertex4 = graph.addVertex(4);

        graph.addEdge(vertex1, vertex2);
        graph.addEdge(vertex1, vertex3);
        graph.addEdge(vertex2, vertex3);
        graph.addEdge(vertex2, vertex4);

        List<Vertex<Integer>> result = graph.breadthFirst(vertex1);

        assertEquals(4, result.size());
        assertEquals(vertex1, result.get(0));
        assertEquals(vertex2, result.get(1));
        assertEquals(vertex3, result.get(2));
        assertEquals(vertex4, result.get(3));
    }
    @Test
    void businessTripTest() {
        Graph<String> cityGraph = new Graph<>(10);

        Vertex<String> cityA = cityGraph.addVertex("CityA");
        Vertex<String> cityB = cityGraph.addVertex("CityB");
        Vertex<String> cityC = cityGraph.addVertex("CityC");

        cityGraph.addEdge(cityA, cityB, 100);
        cityGraph.addEdge(cityB, cityC, 150);

        String[] tripCities1 = {"CityA", "CityB", "CityC"};
        Integer tripCost1 = Graph.businessTrip(cityGraph, tripCities1);
        assertEquals(250, tripCost1);

        String[] tripCities2 = {"CityA", "CityC"};
        Integer tripCost2 = Graph.businessTrip(cityGraph, tripCities2);
        assertNull(tripCost2);

        String[] tripCities3 = {"CityA"};
        Integer tripCost3 = Graph.businessTrip(cityGraph, tripCities3);
        assertNull(tripCost3);
    }
    @Test
    void depthFirst() {
        Graph<Integer> graph = new Graph<>(5);
        Vertex<Integer> v1 = graph.addVertex(1);
        Vertex<Integer> v2 = graph.addVertex(2);
        Vertex<Integer> v3 = graph.addVertex(3);
        Vertex<Integer> v4 = graph.addVertex(4);
        Vertex<Integer> v5 = graph.addVertex(5);

        graph.addEdge(v1, v2);
        graph.addEdge(v1, v3);
        graph.addEdge(v2, v4);
        graph.addEdge(v3, v5);
        List<Vertex<Integer>> result = graph.depthFirst(v1);
        assertEquals(5, result.size());
        assertTrue(result.contains(v1));
        assertTrue(result.contains(v2));
        assertTrue(result.contains(v3));
        assertTrue(result.contains(v4));
        assertTrue(result.contains(v5));
    }

}
