/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedlist;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    private LinkedList<Integer> testList;
    @Test
    public void testEmptyLinkedList() {
        LinkedList<Integer> testList = new LinkedList<>();
        assertNotNull(testList);
    }

    @Test
    public void testInsert(){
        testList = new LinkedList<>();
        testList.insert(5);
        assertNotNull(testList);

    }
    @Test
    public void testIsIncludedFalse(){
        testList = new LinkedList<>();
        testList.insert(5);
        assertEquals(false, testList.include(50));
    }


    @Test
    public void testIsIncludedTrue(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        assertTrue(testList.include(6));
    }
    @Test
    public void testToString(){
        testList = new LinkedList<>();
        testList.insert(5);
        testList.insert(6);
        assertEquals("{6} -> {5} -> Null", testList.toString());
    }


    @Test
    public void testAppendSingleNode() {
        testList = new LinkedList<>();
        testList.append(5);
        assertEquals("{5} -> Null", testList.toString());
    }

    @Test
    public void testAppendMultipleNodes() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);
        assertEquals("{5} -> {6} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testInsertBeforeMiddle() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);
        testList.insertBefore(6, 13);
        assertEquals("{5} -> {13} -> {6} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testInsertBeforeFirstNode() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);
        testList.insertBefore(5, 16);
        assertEquals("{16} -> {5} -> {6} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testInsertAfterMiddle() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);
        testList.insertAfter(6, 13);
        assertEquals("{5} -> {6} -> {13} -> {9} -> Null", testList.toString());
    }

    @Test
    public void testInsertAfterLastNode() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);
        testList.insertAfter(9, 11);
        assertEquals("{5} -> {6} -> {9} -> {11} -> Null", testList.toString());
    }
    @Test
    public void testKthFromEndGreaterThanLength() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);

        Integer result = testList.kthFromEnd(4);
        assertNull(result);
    }

    @Test
    public void testKthFromEndSameAsLength() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);

        Integer result = testList.kthFromEnd(3);
        assertNull(result);
    }

    @Test
    public void testKthFromEndNotPositive() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);

        Integer result = testList.kthFromEnd(-2);
        assertNull(result);
    }

    @Test
    public void testKthFromEndSingleNode() {
        testList = new LinkedList<>();
        testList.append(5);

        Integer result = testList.kthFromEnd(0);
        assertEquals(Integer.valueOf(5), result);
    }

    @Test
    public void testKthFromEndHappyPath() {
        testList = new LinkedList<>();
        testList.append(5);
        testList.append(6);
        testList.append(9);
        testList.append(11);

        Integer result = testList.kthFromEnd(2);
        assertEquals(Integer.valueOf(6), result);
    }
    @Test
    public void testLinkedListZip(){

        LinkedList  testList1 = new LinkedList<>();
        LinkedList testList2 = new LinkedList<>();
        LinkedList  mergedList = new LinkedList<>();

         testList1.append(1);
         testList1.append(3);
        testList1.append(5);

        testList2.append(2);
        testList2.append(4);
        testList2.append(6);

        assertEquals("{1} -> {2} -> {3} -> {4} -> {5} -> {6} -> Null", mergedList.linkedListZip(testList1, testList2).toString());





    }



}